# Generated by Django 3.2.7 on 2021-09-05 19:00

import cars.models
import cars.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import utils.slugs


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(max_length=30, verbose_name='Brand')),
                ('model', models.CharField(max_length=30, verbose_name='Model')),
                ('production_year', models.PositiveIntegerField(default=2021, validators=[django.core.validators.MinValueValidator(1990), cars.models.max_value_current_year], verbose_name='Production year')),
                ('registration', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{2,3}[\\s]{1}[0-9A-Z]{5,6}$', 'Please enter 2-3 letters, whitespace and 5-6 signs', 'invalid')], verbose_name='Registration')),
                ('mileage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='Car mileage')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['brand', 'model'], unique=True)),
            ],
            options={
                'verbose_name': 'car',
                'verbose_name_plural': 'cars',
            },
        ),
        migrations.CreateModel(
            name='CarPart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latest_fix_date', models.DateTimeField(validators=[cars.validators.no_future_validator], verbose_name='Latest service date')),
                ('latest_fix_mileage', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='Car mileage before latest service')),
                ('fix_every_period', models.PositiveIntegerField(verbose_name='Service needed every - period')),
                ('fix_every_mileage', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='Service needed every - mileage')),
                ('next_fix_date', models.DateTimeField(blank=True, null=True, validators=[cars.validators.no_past_validator], verbose_name='Next service date')),
                ('next_fix_mileage', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='Mileage until next service')),
                ('description', models.CharField(blank=True, max_length=50, null=True, verbose_name='Car part description')),
                ('slug', models.CharField(db_index=True, default=utils.slugs.generate_slug, editable=False, max_length=10, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'car part',
                'verbose_name_plural': 'car parts',
            },
        ),
        migrations.CreateModel(
            name='CarPartCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Part name')),
                ('drive_type', models.CharField(blank=True, choices=[('Petrol', 'Petrol'), ('Diesel', 'Diesel'), ('Hybrid', 'Hybrid'), ('LPG', 'LPG')], max_length=20, verbose_name='Only for drive type')),
                ('slug', models.CharField(db_index=True, default=utils.slugs.generate_slug, editable=False, max_length=10, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'car part category',
                'verbose_name_plural': 'car part categories',
            },
        ),
        migrations.CreateModel(
            name='Engine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.DecimalField(decimal_places=2, default=2.0, max_digits=4, validators=[django.core.validators.MaxValueValidator(6.0), django.core.validators.MinValueValidator(0.7)], verbose_name='Capacity')),
                ('horsepower', models.IntegerField(default=100, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(20)], verbose_name='Horsepower')),
                ('engine_type', models.CharField(choices=[('Petrol', 'Petrol'), ('Diesel', 'Diesel'), ('Hybrid', 'Hybrid'), ('LPG', 'LPG')], max_length=20, verbose_name='Engine type')),
                ('slug', models.CharField(db_index=True, default=utils.slugs.generate_slug, editable=False, max_length=10, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'engine',
                'verbose_name_plural': 'engines',
            },
        ),
        migrations.AddConstraint(
            model_name='carpartcategory',
            constraint=models.UniqueConstraint(fields=('name', 'drive_type'), name='unique_part_category'),
        ),
        migrations.AddField(
            model_name='carpart',
            name='car',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cars.car'),
        ),
        migrations.AddField(
            model_name='carpart',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cars.carpartcategory'),
        ),
        migrations.AddField(
            model_name='car',
            name='engine',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cars.engine'),
        ),
    ]
